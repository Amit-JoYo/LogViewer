<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Metrolib.Controls;assembly=Metrolib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Metrolib;component/Themes/Constants.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Tailviewer;component/Themes/Constants.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="DataSourceTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="True" />
        <!-- IsInverted is an inherited, attached dependency property and, as such,
             travels down the entire visual tree. We use this to ensure that our content
             renders properly when we are selected (darker background => the foreground of
             our content should be white-ish). However we don't want this property to travel
             to our child TreeViewItems, and therefore have to set the property to false, by default
        -->
        <Setter Property="controls:Properties.IsInverted" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Border Grid.ColumnSpan="2" Background="{TemplateBinding Background}" />
                        <controls:ExpanderToggleButton x:Name="PART_Expander"
                                                       IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                       Margin="4"
                                                       Padding="0"
                                                       Width="24"
                                                       Height="24"
                                                       />

                        <ContentPresenter x:Name="PART_Header" ContentSource="Header" Grid.Column="1" />

                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="PART_Expander" Value="Collapsed" />
                        </Trigger>

                        <!-- When we're not selected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="controls:Properties.IsInverted" Value="False" />
                        </Trigger>

                        <!-- When we're selected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrushSelected}" />
                            <Setter Property="controls:Properties.IsInverted" Value="True" />
                        </Trigger>
                        
                        <!-- When we're selected, but NOT focused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource BackgroundBrushSelectedUnfocused}" />
                            <Setter Property="controls:Properties.IsInverted" Value="False" />
                        </MultiTrigger>
                        
                        <!-- We want to hide our items in case we're collapsed  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="False" />
                                <Condition Property="HasItems" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource BackgroundBrushHovered}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>